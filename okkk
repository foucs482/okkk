#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<queue>
#define MAXVEX 100
using namespace std;
typedef struct EdgeNode *Edge;
struct EdgeNode{	//边结点
	int adjvex;
	Edge next;
};
typedef struct VertexNode{	//点结点
	char data;
	Edge firstedge;
} AdjList[MAXVEX];
typedef struct{	//图
	AdjList adjList;
	int numNodes,numEdges;
} Graph;
void CreateGraph(Graph &g){		//图的建立é
	cin>>g.numNodes;
	for(int i=0;i<g.numNodes;i++){
		cin>>g.adjList[i].data;
		g.adjList[i].firstedge=NULL;
	}
	cin>>g.numEdges;
	for(int i=0;i<g.numEdges;i++){
		char a,b;
		cin>>a>>b;
		Edge e1=(Edge)malloc(sizeof(EdgeNode));
		for(int j=0;j<g.numNodes;j++){
			if(g.adjList[j].data==a){
				e1->next=g.adjList[j].firstedge;
				g.adjList[j].firstedge=e1;
			}
			if(g.adjList[j].data==b){
				e1->adjvex=j;
			}
		}
	}
}
int visited[MAXVEX];
void DFS(Graph G,int i){
	Edge p;
	visited[i]=1;
	cout<<G.adjList[i].data<<' ';
	p=G.adjList[i].firstedge;
	while(p){
		if(!visited[p->adjvex]){
			DFS(G,p->adjvex);
		}
		p=p->next;
	}
}
void DFSTraverse(Graph G){
	int i;
	for(i=0;i<G.numNodes;i++){
		visited[i]=0;
	}
	for(i=0;i<G.numNodes;i++){
		if(!visited[i]){
			DFS(G,i);
		}
	}
	cout<<endl;
}
void BFSTraverse(Graph G){
	int i;
	queue<char> q;
	for(i=0;i<G.numNodes;i++){
		visited[i]=0;
	}
	for(i=0;i<G.numNodes;i++){
		if(!visited[i]){
			visited[i]=1;
			cout<<G.adjList[i].data<<' ';
			Edge e;
			e=G.adjList[i].firstedge;
			while(e){
			 	q.push(e->adjvex);
				 e=e->next; 
			} 
			while(!q.empty()){
				int index=q.front();
				q.pop();
				if(!visited[index]){
					visited[index]=1;
					cout<<G.adjList[index].data<<' ';
					e=G.adjList[index].firstedge;
					while(e){
			 			q.push(e->adjvex);
				 		e=e->next; 
					} 
				} 
			}
		}
	}
}
int main(){
	Graph G;
	CreateGraph(G);
	DFSTraverse(G);
	BFSTraverse(G);
	return 0;
}

